import React from 'react';
import $ from 'jquery';

import ChatLog from './ChatLog.js';
import ChatForm from './ChatForm.js';
import { API_URL, POLL_INTERVAL } from './global.js';

module.exports = React.createClass({
    getInitialState: function() {
      return {data: [], _isMounted: false};
    },
    loadMessagesFromServer: function() {
      if (this.state._isMounted) {
        $.ajax({
          url: API_URL,
          dataType: 'json',
          cache: false,
          success: function(data) {
            this.setState({data: data});
          }.bind(this),
          error: function(xhr, status, err) {
            console.error(API_URL, status, err.toString());
          }.bind(this)
        });
      }
    },
    handleMessageSubmit: function(message) {
      var messages = this.state.data;
      // Optimistically set an id on the new message. It will be replaced by an
      // id generated by the server. In a production application you would likely
      // not use Date.now() for this and would have a more robust system in place.
      message.timestamp = Date.now();
      var newMessages = messages.concat([message]);
      this.setState({data: newMessages});
      $.ajax({
        url: API_URL,
        dataType: 'json',
        type: 'POST',
        data: message,
        success: function(data) {
          this.setState({data: data});
        }.bind(this),
        error: function(xhr, status, err) {
          this.setState({data: messages});
          console.error(API_URL, status, err.toString());
        }.bind(this)
      });
    },
    getInitialState: function() {
      return {data: []};
    },
    componentDidMount: function() {
      this.state._isMounted = true;
      this.loadMessagesFromServer();
      setInterval(this.loadMessagesFromServer, POLL_INTERVAL);
    },
    componentWillUnmount: function() {
      // Reset the isMounted flag so that the loadMessagesFromServer callback
      // stops requesting state updates when the messageList has been unmounted.
      // This switch is optional, but it gets rid of the warning triggered by
      // setting state on an unmounted component.
      // See https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html
      this.state._isMounted = false;
    },
    render: function() {
      return (
        <div className="messageBox">
          <ChatLog data={this.state.data} />
          <ChatForm onMessageSubmit={this.handleMessageSubmit} />
        </div>
      );
    }
  });